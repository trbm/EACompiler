'____________________________________________________________________
'
' © Copyright 2009, brennan-marquez, LLC  All rights reserved.
'____________________________________________________________________
'
'     $RCSfile: OutputLanguagePERL.vb,v $
'
'    $Revision: 1.1 $
'
'        $Date: 2008/09/24 21:09:08 $
'
'      $Author: thomasb $
'
'      $Source: OutputLanguagePERL.vb,v $
'
'        $Name:  $
'____________________________________________________________________


Imports system.Text.RegularExpressions
Imports System.Windows.Forms.Control
 

Public Class OutputLanguagePERL
    '    Implements IOutputLanguage

    '    Private Const FIRST_STATE_ID As Integer = 3000
    '    Private Const FIRST_EVENT_ID As Integer = 8000
    '    Private Const CONSTANTS_COLUMN = 60
    '    Private Const COLUMN_WIDTH As Integer = 55
    '    Private _ofrmMain As frmMain

    '    'Public Function CreateOutputFile(ByVal sModelFilename As String, _
    '    '                          ByRef rchOutput As RichTextBox, _
    '    '                          ByRef oControls As ControlCollection) As String Implements IOutputLanguage.CreateOutputFile

    '    '    Dim sOutputFilename As String
    '    '    Dim oOutputFile As OutputFile

    '    '    With sModelFilename
    '    '        sOutputFilename = .Substring(0, .LastIndexOf(".")) & ".pl"
    '    '    End With
    '    '    oOutputFile = New OutputFile(sOutputFilename, True)
    '    '    With oOutputFile
    '    '        .Add("#!/usr/bin/perl -w")
    '    '        .Add("")
    '    '        .Add("#_______________________________________________________________________")
    '    '        .Add("# ")
    '    '        .Add("#    Generated by: " & Application.ProductName & " (v" & VERSION & ")")
    '    '        .Add("# ")
    '    '        .Add("#        Creation: " & Now.ToLongDateString & ", " & Now.ToLongTimeString)
    '    '        .Add("# ")
    '    '        .Add("# Target Language: Perl")
    '    '        .Add("# ")
    '    '        .Add("#      Model File: " & sModelFilename)
    '    '        .Add("# ")
    '    '        .Add("#       $Revision: 1.1 $")
    '    '        .Add("# ")
    '    '        .Add("#_______________________________________________________________________")
    '    '        .Add("")
    '    '        .Add("")
    '    '        .Add("use strict;")
    '    '        .Add("")
    '    '        .Add("use VMS_Utilities;")
    '    '        .Add("use VMS_BSM;")
    '    '        .Add("use VMS_PEM;")
    '    '        .Add("use Time::HiRes qw ( time usleep gettimeofday );")
    '    '        .Add("use constants;")
    '    '        .Add("use ArchitectureElements;")
    '    '        .Add("use Env;")
    '    '        .Add("use Fcntl;")
    '    '        .Add("use IPC::Open2;")
    '    '        .Add("use Data::Dumper;       # usage:  print Dumper %myhash ")
    '    '        .Add("use Getopt::Long qw(:config pass_through);")
    '    '        .Add("")
    '    '        .Add("my $testIndent 		= $Constants::testIndent; 	# indentation for test elements (from constants.pm)")
    '    '        .Add("my $stepIndent 		= $Constants::stepIndent; 	# indentation for step elements (from constants.pm)")
    '    '        .Add("")
    '    '        .Add("my $util                = VMS_Utilities->new(); $util->QuietMode();")
    '    '        .Add("my $as                  = AutomationScript->new();")
    '    '        .Add("my $bsm                 = VMS_BSM->new();")
    '    '        .Add("my $pem                 = VMS_PEM->new();")
    '    '        .Add("my $arch                = arch->new();")
    '    '        .Add("my $testMule;")
    '    '        .Add("my $serialNumber=200;")
    '    '        .Add()

    '    '        .Add("#__________________________________________________________")
    '    '        .Add("#")
    '    '        .Add("# A useful debugging tool, usage: ")
    '    '        .Add("#      ::dump( $myThingie [, depth]  );     # where the depth value is optional")
    '    '        .Add("#")
    '    '        .Add("sub dump")
    '    '        .Add("{")
    '    '        .Add("	my ($string, $maxDepth) = @_;")
    '    '        .Add("	if($maxDepth)")
    '    '        .Add("	{")
    '    '        .Add("		$Data::Dumper::Maxdepth = $maxDepth;")
    '    '        .Add("	}")
    '    '        .Add("	else")
    '    '        .Add("	{")
    '    '        .Add("		$Data::Dumper::Maxdepth = 0;")
    '    '        .Add("	}")
    '    '        .Add("	print Dumper @_ ;")
    '    '        .Add("}    ")
    '    '        .Add()
    '    '    End With

    '    '    For Each oControl As Control In oControls
    '    '        recurseControls(oControl, oOutputFile)
    '    '    Next

    '    '    rchOutput.Text = oOutputFile.ToString
    '    '    oOutputFile.Close()
    '    '    oOutputFile = Nothing
    '    '    Return sOutputFilename
    '    'End Function

    '    Public Sub CreateDomains(ByVal _oRepository As EA.Repository, _
    '                               ByVal oTextbox As RichTextBox) Implements IOutputLanguage.CreateDomains
    '        Dim iTabIndex As Integer = 0
    '        Dim oPackage As EA.Package
    '        Dim oTabPage As TabPage = Nothing
    '        Dim oDomain As Domain

    '        Try
    '            Debug.Assert(False, "you'll need to add the call to 'createOutputFile' to get the text written (see OutputLanguageVB.vb)")
    '            'If oTabControl Is Nothing Then                  ' if no tab control, must be running without a UI form, create a fake one
    '            '    _ofrmMain = New frmMain
    '            '    oTabControl = _ofrmMain.TabControl1
    '            'End If

    '            'For Each oTabPage In oTabControl.TabPages
    '            '    oTabPage.Text = ""
    '            'Next
    '            'If oTabPage IsNot Nothing Then
    '            '    oTabPage.Text = "(output)"
    '            'End If

    '            For Each oPackage In _oRepository.Models
    '                'oTabPage = oTabControl.TabPages(iTabIndex)
    '                'oTextbox = oTabPage.Controls(0)
    '                oDomain = New Domain(oPackage, _oRepository, oTextbox)
    '                If Not oDomain.IsRealized Then
    '                    oTabPage.Text = oPackage.Name
    '                    iTabIndex += 1
    '                End If
    '            Next
    '        Catch ex As Exception
    '            Dim oErrorHandler As New sjmErrorHandler(ex)
    '        End Try
    '    End Sub

    '    Private Sub recurseControls(ByVal oParentControl As Control, ByVal oOutputFile As OutputFile)
    '        For Each oControl As Control In oParentControl.Controls
    '            If oControl.GetType.ToString.IndexOf("RichTextBox") > 0 Then
    '                If oControl.Text.Length > 0 Then
    '                    With oOutputFile
    '                        .Add(" ")
    '                        .Add("#_____________________________________________________________________")
    '                        .Add("#_____________________________________________________________________")
    '                        .Add(" ")
    '                        .Add(oControl.Text)
    '                    End With
    '                End If
    '            End If
    '            recurseControls(oControl, oOutputFile)
    '        Next
    '    End Sub

    '    Private Class Domain
    '        Private _oSourceOutput As RichTextBox
    '        Private _oRepository As EA.Repository
    '        ''     Private _sPackageId As String
    '        Private _oProject As EA.Project
    '        ''     Private _oPackage As EA.Package
    '        Private _ClassById As Collection
    '        Private _Triggers As Collection
    '        Private _States As Collection
    '        Private _InitialStates As Collection
    '        Private _FinalStates As Collection
    '        Private _IgnoreIndicatorStates As Collection
    '        Private _IsRealized As Boolean

    '        Public ReadOnly Property IgnoreIndicatorStates() As Collection
    '            Get
    '                Return _IgnoreIndicatorStates
    '            End Get
    '        End Property

    '        Public ReadOnly Property InitialStates() As Collection
    '            Get
    '                Return _InitialStates
    '            End Get
    '        End Property

    '        Public ReadOnly Property FinalStates() As Collection
    '            Get
    '                Return _FinalStates
    '            End Get
    '        End Property

    '        Public ReadOnly Property States() As Collection
    '            Get
    '                Return _States
    '            End Get
    '        End Property

    '        Public ReadOnly Property EAClass(ByVal iID As Integer) As EA.Element
    '            Get
    '                Dim oClass As EA.Element = Nothing

    '                If _ClassById.Contains(iID.ToString) Then
    '                    oClass = _ClassById.Item(iID.ToString)
    '                Else
    '                    MsgBox("Unknown class id: " & iID, MsgBoxStyle.Critical)
    '                End If
    '                Return oClass
    '            End Get
    '        End Property

    '        Public ReadOnly Property IsRealized() As Boolean
    '            Get
    '                Return _IsRealized
    '            End Get
    '        End Property

    '        Public Sub New(ByRef oPackage As EA.Package, ByRef oRepository As EA.Repository, ByRef oSourceOutput As RichTextBox)
    '            Try
    '                ''          _oPackage = oPackage
    '                _oSourceOutput = oSourceOutput
    '                _oRepository = oRepository
    '                ''           _sPackageId = _oPackage.PackageID

    '                _ClassById = New Collection
    '                _Triggers = New Collection
    '                _States = New Collection
    '                _InitialStates = New Collection
    '                _FinalStates = New Collection
    '                _IgnoreIndicatorStates = New Collection

    '                _IsRealized = (oPackage.StereotypeEx.IndexOf("realized") > -1)

    '                If Not _IsRealized Then
    '                    Debug.WriteLine("start cataloging")
    '                    catalogElements(oPackage)
    '                    Debug.WriteLine("start adding state constants")
    '                    addStateConstants()
    '                    Debug.WriteLine("start adding event constants")
    '                    addEventConstants()
    '                    generateSource(oPackage)
    '                End If
    '            Catch ex As Exception
    '                Dim oErrorHandler As New sjmErrorHandler(ex)
    '            End Try
    '        End Sub

    '        Private Sub addStateConstants()
    '            Dim oState As EA.Element
    '            Dim iNextStateID = FIRST_STATE_ID

    '            With _oSourceOutput
    '                .AppendText(vbCrLf)
    '                .AppendText("#_________________________________________________________  S T A T E S " & vbCrLf)
    '                .AppendText("use constant   # states" & vbCrLf)
    '                .AppendText("{" & vbCrLf)
    '                For Each oState In _States
    '                    .AppendText(("   STATE_" & oState.Name & " => ").PadRight(CONSTANTS_COLUMN) & iNextStateID & "," & vbCrLf)
    '                    iNextStateID += 1
    '                Next
    '                .AppendText("};" & vbCrLf)

    '                .AppendText(vbCrLf)
    '                .AppendText("our %StateNameToId =        # convert state name to an associated ID code" & vbCrLf)
    '                .AppendText("(" & vbCrLf)
    '                For Each oState In _States
    '                    .AppendText(("   " & oState.Name & " => ").PadRight(CONSTANTS_COLUMN) & "STATE_" & oState.Name & "," & vbCrLf)
    '                Next
    '                .AppendText(");" & vbCrLf)
    '                .AppendText("our %StateIdToName = reverse %StateNameToId;  # convert an ID code to an associated name" & vbCrLf)
    '            End With
    '        End Sub

    '        Private Sub addEventConstants()
    '            Dim sEvent As String
    '            Dim iNextEventID = FIRST_EVENT_ID
    '            Dim oEvents As New Collection
    '            Dim oState As EA.Element
    '            Dim oConnector As EA.Connector
    '            Dim sTokens() As String

    '            With _oSourceOutput
    '                For Each oState In _States
    '                    For Each oConnector In oState.Connectors
    '                        sEvent = oConnector.TransitionEvent
    '                        sTokens = Split(sEvent, ":")                ' discard any "ev1:" type prefixes
    '                        sEvent = sTokens(0)
    '                        sTokens = Split(sEvent, "(")                ' discard any parameters supplied
    '                        sEvent = sTokens(0)
    '                        If sEvent.Length > 0 Then
    '                            If Not oEvents.Contains(sEvent) Then
    '                                oEvents.Add(sEvent, sEvent)
    '                            End If
    '                        End If
    '                    Next
    '                Next

    '                .AppendText(vbCrLf)
    '                .AppendText("#_____________________________________________________________________ EVENTS" & vbCrLf)
    '                .AppendText("use constant" & vbCrLf)
    '                .AppendText("{" & vbCrLf)
    '                For Each sEvent In oEvents
    '                    .AppendText(("   EVENT_" & sEvent & " => ").PadRight(CONSTANTS_COLUMN) & iNextEventID & "," & vbCrLf)
    '                    iNextEventID += 1
    '                Next
    '                .AppendText("};" & vbCrLf)

    '                .AppendText(vbCrLf)
    '                .AppendText("our %EventNameToId =  # convert event name to an associated ID code" & vbCrLf)
    '                .AppendText("(" & vbCrLf)
    '                For Each sEvent In oEvents
    '                    .AppendText(("   " & sEvent & " => ").PadRight(CONSTANTS_COLUMN) & "EVENT_" & sEvent & "," & vbCrLf)
    '                Next
    '                .AppendText(");" & vbCrLf)
    '                .AppendText("our %EventIdToName = reverse %EventNameToId;      # convert an ID code to an associated name" & vbCrLf)
    '                .AppendText(vbCrLf)
    '                .AppendText(vbCrLf)
    '            End With
    '        End Sub

    '        Private Sub catalogElements(ByVal oPackage As EA.Package)
    '            Dim oElement As EA.Element
    '            Dim oErrorHandler As New sjmErrorHandler

    '            Try
    '                For Each oSubPackage As EA.Package In oPackage.Packages
    '                    catalogElements(oSubPackage)                                            ' recurse
    '                Next

    '                Debug.WriteLine(oPackage.Name)
    '                For Each oElement In oPackage.Elements
    '                    Select Case oElement.MetaType
    '                        Case "FinalState"
    '                            oErrorHandler.SupplementalInformation = "FinalStates: " & oElement.Name                             ' in case an exception is thrown
    '                            _FinalStates.Add(oElement, oElement.ElementID)

    '                            oErrorHandler.SupplementalInformation = "_States: (FinalState)" & oElement.ElementID                ' in case an exception is thrown
    '                            _States.Add(oElement, oElement.ElementID)

    '                        Case "Pseudostate"
    '                            Select Case oElement.Name
    '                                Case "Initial"
    '                                    oErrorHandler.SupplementalInformation = "_InitialStates: " & oElement.Name                  ' in case an exception is thrown
    '                                    _InitialStates.Add(oElement, oElement.ElementID)

    '                                Case Else
    '                                    oErrorHandler.SupplementalInformation = "_IgnoreIndicatorStates: " & oElement.Name          ' in case an exception is thrown
    '                                    _IgnoreIndicatorStates.Add(oElement, oElement.ElementID)

    '                                    oErrorHandler.SupplementalInformation = "_States (Pseudostate): " & oElement.Name           ' in case an exception is thrown
    '                                    _States.Add(oElement, oElement.ElementID)
    '                            End Select

    '                        Case "Trigger"
    '                            oErrorHandler.SupplementalInformation = "_Triggers: " & oElement.Name                               ' in case an exception is thrown
    '                            If Not _Triggers.Contains(oElement.Name) Then   ' event names may be reused between state machines
    '                                _Triggers.Add(oElement, oElement.Name)
    '                            End If

    '                        Case "StateNode"
    '                            oErrorHandler.SupplementalInformation = "_States (StateNode): " & oElement.Name                     ' in case an exception is thrown
    '                            _States.Add(oElement, oElement.ElementID)

    '                        Case "Class"
    '                            oErrorHandler.SupplementalInformation = "_ClassById: " & oElement.Name                              ' in case an exception is thrown
    '                            _ClassById.Add(oElement, oElement.ElementID)

    '                        Case "State"
    '                            oErrorHandler.SupplementalInformation = "_States (State): " & oElement.Name                         ' in case an exception is thrown
    '                            _States.Add(oElement, oElement.ElementID)

    '                        Case Else
    '                            ' Debug.WriteLine(oElement.Name & " is an unhandled metatype " & oElement.MetaType)
    '                    End Select
    '                Next
    '            Catch ex As Exception
    '                oErrorHandler.Announce(ex)
    '            End Try
    '        End Sub

    '        Private Sub fileFooter(ByVal oPackage As EA.Package)
    '            With _oSourceOutput
    '                .AppendText(vbCrLf)
    '                .AppendText("$as->cleanup;" & vbCrLf)
    '                .AppendText("$util->cleanup;" & vbCrLf)
    '                .AppendText(vbCrLf)
    '                '.AppendText("my $CANMonitorESS = CANMonitor->new( ""CANMonitorESS"" );" & vbCrLf)
    '                '.AppendText("$CANMonitorESS->{Port}    = $ENV{ CAN_PORT_ESS };" & vbCrLf)
    '                '.AppendText("$CANMonitorESS->{BusName} = ""ESS"";" & vbCrLf)
    '                '.AppendText("$arch->SendEvent( EVENT->new( ::EVENT_Go, $CANMonitorESS ) );" & vbCrLf)
    '                '.AppendText("" & vbCrLf)
    '                '.AppendText("my $CANMonitorVDS         = CANMonitor->new( ""CANMonitorVDS"" );" & vbCrLf)
    '                '.AppendText("$CANMonitorVDS->{Port}    = $ENV{ CAN_PORT_VDS };" & vbCrLf)
    '                '.AppendText("$CANMonitorVDS->{BusName} = ""VDS"";" & vbCrLf)
    '                '.AppendText("$arch->SendEvent( EVENT->new( ::EVENT_Go, $CANMonitorVDS ) );" & vbCrLf)
    '                '.AppendText("" & vbCrLf)
    '                '.AppendText("my $CANMonitorPEM = CANMonitor->new( ""CANMonitorPEM"" );" & vbCrLf)
    '                '.AppendText("$CANMonitorPEM->{Port}    = $ENV{ CAN_PORT_PEM };" & vbCrLf)
    '                '.AppendText("$CANMonitorPEM->{BusName} = ""PEM"";" & vbCrLf)
    '                '.AppendText("$arch->SendEvent( EVENT->new( ::EVENT_Go, $CANMonitorPEM ) );" & vbCrLf)
    '                '.AppendText(vbCrLf)
    '                .AppendText("$testMule = VMS_5251->new( ""testMule"");" & vbCrLf)
    '                .AppendText("$testMule->{UpdateInterval}           = 500;" & vbCrLf)
    '                .AppendText("$testMule->{VoltageReportingInterval} = 1000;     # set to zero to suppress reporting" & vbCrLf)
    '                '.AppendText("$testMule->Relate_R3_CANMonitor( $CANMonitorVDS );" & vbCrLf)
    '                .AppendText(vbCrLf)
    '                .AppendText("$arch->SendEvent( EVENT->new( ::EVENT_Go, $testMule ) );" & vbCrLf)
    '                .AppendText(vbCrLf)
    '                .AppendText("$arch->PrimeEventPump();          # never returns" & vbCrLf)
    '                .AppendText(vbCrLf)
    '            End With
    '        End Sub

    '        Private Sub generateSource(ByRef oPackage As EA.Package)
    '            Dim oClassElement As EA.Element
    '            Dim oEAClass As EAClass

    '            Try
    '                With _oSourceOutput
    '                    Debug.WriteLine("start source creation")
    '                    .AppendText("")
    '                    .AppendText("# Domain: " & oPackage.Name)
    '                    If oPackage.Notes.Length > 0 Then
    '                        .AppendText("   # " & oPackage.Notes)
    '                    End If
    '                    .AppendText(vbCrLf)
    '                    For Each oClassElement In _ClassById
    '                        '    If oPackage.PackageID = oClassElement.PackageID Then
    '                        Debug.WriteLine("converting class:" & oClassElement.Name)
    '                        oEAClass = New EAClass(oClassElement, Me, _oSourceOutput)
    '                        '   End If
    '                    Next
    '                    fileFooter(oPackage)
    '                    Debug.WriteLine("end source creation")
    '                End With
    '            Catch ex As Exception
    '                Dim oErrorHandler As New sjmErrorHandler(ex)
    '            End Try
    '        End Sub

    '    End Class

    '    Private Class EAClass
    '        Private _oSourceOutput As RichTextBox
    '        Private _oDomain As Domain
    '        Private _bFinalStateReported As Boolean = False
    '        Private _oEvents As New Collection
    '        Private _sInitialState As String = ""
    '        Private _bActiveClass As Boolean = False
    '        Private _bIsSubtype As Boolean
    '        Private _bIsSupertype As Boolean
    '        Const COMMENT_START_COLUMN = 40

    '        Public Sub New(ByVal oClassElement As EA.Element, ByRef oDomain As Domain, ByVal oSourceOutput As RichTextBox)
    '            MyBase.New()

    '            Dim sTokens() As String
    '            Try
    '                oClassElement.Name = CanonicalName(oClassElement.Name)      ' be sure the class name is in a legal form

    '                _oDomain = oDomain
    '                _oSourceOutput = oSourceOutput

    '                sTokens = Split(oClassElement.GetRelationSet(EA.EnumRelationSetType.rsGeneralizeEnd), ",")
    '                _bIsSupertype = (sTokens(0).Length > 0)

    '                sTokens = Split(oClassElement.GetRelationSet(EA.EnumRelationSetType.rsGeneralizeStart), ",")
    '                _bIsSubtype = (sTokens(0).Length > 0)


    '                If Not _bIsSupertype Then
    '                    With _oSourceOutput
    '                        .AppendText(vbCrLf)
    '                        .AppendText("#####################################################################################" & vbCrLf)
    '                        .AppendText("# " & vbCrLf)
    '                        .AppendText("#" & ("                                    `" & oClassElement.Name).PadLeft(84) & vbCrLf)
    '                        .AppendText("# " & vbCrLf)
    '                        .AppendText("#####################################################################################" & vbCrLf)
    '                        .AppendText(vbCrLf)
    '                        .AppendText("   package " & oClassElement.Name & ";" & vbCrLf)
    '                        .AppendText(vbCrLf)

    '                        addRelationships(oClassElement)
    '                        addStateMachine(oClassElement)
    '                        addAttributes(oClassElement)
    '                    End With
    '                End If
    '            Catch ex As Exception
    '                Dim oErrorHandler As New sjmErrorHandler(ex)
    '            End Try
    '        End Sub

    '        Private Sub addStateMachine(ByVal oClass As EA.Element)
    '            Dim oState As EA.Element
    '            Dim oConnector As EA.Connector
    '            Dim oClientConnectorEnd As EA.ConnectorEnd
    '            Dim oSupplierConnectorEnd As EA.ConnectorEnd
    '            Dim sArgumentList As String = ""
    '            Dim bStateMachineHeaderAdded As Boolean = False
    '            Dim oSupplierState As EA.Element = Nothing
    '            Dim iNextStateID = FIRST_STATE_ID
    '            Dim oPopulateTransitions As New Collection
    '            Dim oTakeTransitions As New Collection
    '            Dim sTransitionLine As String
    '            Dim PIGTAIL_ORIGIN_STATE_TYPE = 10

    '            Try
    '                If _oDomain.States.Count > 0 Then
    '                    For Each oState In _oDomain.States
    '                        If oState.ParentID = oClass.ElementID Then
    '                            _bActiveClass = True
    '                            Exit For
    '                        End If
    '                    Next

    '                    If _bActiveClass Then               ' if this class has a state machine
    '                        With _oSourceOutput
    '                            .AppendText(vbCrLf)
    '                            .AppendText(vbCrLf)
    '                            For Each oState In _oDomain.States
    '                                If oState.ParentID = oClass.ElementID Then
    '                                    If oState.Name.Length > 0 Then
    '                                        .AppendText("my @txs_" & oClass.Name & "_" & oState.Name & ";" & vbCrLf)
    '                                    End If
    '                                End If
    '                            Next
    '                            .AppendText(vbCrLf)

    '                            For Each oState In _oDomain.States
    '                                sArgumentList = ""
    '                                If oState.ParentID = oClass.ElementID Then
    '                                    For Each oConnector In oState.Connectors
    '                                        oClientConnectorEnd = oConnector.ClientEnd
    '                                        oSupplierConnectorEnd = oConnector.SupplierEnd
    '                                        addNormalTransition(oConnector, oState, sArgumentList, oPopulateTransitions, oTakeTransitions, oClass)
    '                                    Next
    '                                    addState(oState, sArgumentList, oClass)
    '                                End If
    '                            Next
    '                            .AppendText(vbCrLf)

    '                            For Each sTransitionLine In oPopulateTransitions
    '                                .AppendText(sTransitionLine)
    '                            Next
    '                            .AppendText(vbCrLf)

    '                            .AppendText("#_____________________________________________________________________" & vbCrLf)
    '                            .AppendText("sub TakeTransition()" & vbCrLf)
    '                            .AppendText("{" & vbCrLf)
    '                            .AppendText("   my( $self, $event, $wasDelayed ) = @_;" & vbCrLf)
    '                            .AppendText(vbCrLf)
    '                            .AppendText("   my $eventId    = $event->{EventId};" & vbCrLf)
    '                            .AppendText("   my $functionPointer;" & vbCrLf)
    '                            .AppendText("   my $entryState = $self->{_currentState};" & vbCrLf)
    '                            .AppendText("   my $eventName  = $::EventIdToName{ $eventId };" & vbCrLf)
    '                            .AppendText("   my $stateName  = $::StateIdToName{ $entryState };" & vbCrLf)
    '                            .AppendText(vbCrLf)

    '                            .AppendText("$util->VerbosePrint(""                              <Event  id=\""$eventName\""  fromState=\""stateName\""  />\n"");" & vbCrLf)
    '                            .AppendText(vbCrLf)
    '                            For Each sTransitionLine In oTakeTransitions
    '                                .AppendText(sTransitionLine)
    '                            Next
    '                            .AppendText(vbCrLf)

    '                            For Each oState In _oDomain.States
    '                                If oState.ParentID = oClass.ElementID Then
    '                                    If oState.Subtype = PIGTAIL_ORIGIN_STATE_TYPE Then
    '                                        For Each oConnector In oState.Connectors
    '                                            oClientConnectorEnd = oConnector.ClientEnd
    '                                            oSupplierConnectorEnd = oConnector.SupplierEnd
    '                                            addNormalPigtailTransition(oConnector, oState)
    '                                        Next
    '                                    End If
    '                                End If
    '                            Next
    '                            .AppendText(vbCrLf)

    '                            .AppendText("   if( $functionPointer )" & vbCrLf)
    '                            .AppendText("   {" & vbCrLf)
    '                            .AppendText("        $functionPointer->( $self, $event );" & vbCrLf)
    '                            .AppendText("    }" & vbCrLf)
    '                            .AppendText("    else" & vbCrLf)
    '                            .AppendText("    {" & vbCrLf)
    '                            .AppendText("        if( ! $wasDelayed )" & vbCrLf)
    '                            .AppendText("        {" & vbCrLf)
    '                            .AppendText("            die ""\n\nSTATE MACHINE ERROR -- " & oClass.Name & ": '$eventName' ($eventId) CANT HAPPEN in state '$stateName' ($entryState) \n\n"";")
    '                            .AppendText("        }" & vbCrLf)
    '                            .AppendText("    }" & vbCrLf)
    '                            .AppendText("}" & vbCrLf)
    '                            .AppendText(vbCrLf)
    '                        End With
    '                    End If
    '                End If
    '            Catch ex As Exception
    '                Dim oErrorHandler As New sjmErrorHandler(ex)
    '            End Try
    '        End Sub

    '        Private Sub addNormalTransition(ByVal oConnector As EA.Connector, _
    '                                        ByVal oState As EA.Element, _
    '                                        ByRef sArgumentList As String, _
    '                                        ByVal oPopulateTransitions As Collection, _
    '                                        ByVal oTakeTransitions As Collection, _
    '                                        ByVal oClass As EA.Element)
    '            Dim oClientState As EA.Element
    '            Dim sEvent As String
    '            Dim sTokens() As String
    '            Dim oSupplierState As EA.Element = Nothing
    '            Dim sToStateName As String
    '            Dim sTransitionLine As String

    '            Try
    '                If _oDomain.States.Contains(oConnector.SupplierID.ToString) Then                ' if "to" state is a normal state
    '                    oSupplierState = _oDomain.States(oConnector.SupplierID.ToString)

    '                    If oSupplierState Is oState Then
    '                        If _oDomain.States.Contains(oConnector.ClientID.ToString) Then          ' if "from" state is a normal state
    '                            oClientState = _oDomain.States(oConnector.ClientID.ToString)

    '                            sEvent = oConnector.TransitionEvent
    '                            sTokens = Split(sEvent, ":")
    '                            If sTokens.Length > 1 Then              ' peel off any "ev1:" style prefix
    '                                sEvent = sTokens(1)
    '                            End If

    '                            If sEvent.Length > 0 Then
    '                                If sEvent.IndexOf(")") > 0 Then
    '                                    sTokens = Split(sEvent.Substring(0, sEvent.IndexOf(")")), "(")            ' peel off any parameter payload
    '                                    If sTokens.Length > 1 Then
    '                                        sEvent = sTokens(0)
    '                                        sArgumentList = sTokens(1)
    '                                    End If
    '                                End If
    '                                If _oDomain.IgnoreIndicatorStates.Contains(oState.ElementID) Then
    '                                    sToStateName = "IG"
    '                                Else
    '                                    sToStateName = oState.Name
    '                                End If
    '                                _oEvents.Add(sEvent)

    '                                sTransitionLine = ("$txs_" & oClass.Name & "_" & oClientState.Name).PadRight(45) & _
    '                                                  (" [::EVENT_" & sEvent & "]").PadRight(42) & _
    '                                                  (" = \& action" & sToStateName & ";").PadRight(48) & _
    '                                                  "  # " & oClientState.Name & " - " & sEvent & " -> " & sToStateName & vbCrLf
    '                                oPopulateTransitions.Add(sTransitionLine)

    '                                sTransitionLine = (("   if( $self->{_currentState} == ::STATE_" & _
    '                                                        oClientState.Name & " )").PadRight(77) & _
    '                                                        "  {  $functionPointer = $txs_" & oClass.Name & "_" & _
    '                                                        oClientState.Name & "[ $eventId ];  }" & vbCrLf)
    '                                oTakeTransitions.Add(sTransitionLine)
    '                            End If
    '                        Else
    '                            If _oDomain.InitialStates.Contains(oConnector.ClientID.ToString) Then
    '                                _sInitialState = oState.Name
    '                            End If
    '                        End If
    '                    End If
    '                End If
    '            Catch ex As Exception
    '                Dim oErrorHandler As New sjmErrorHandler(ex)
    '            End Try
    '        End Sub

    '        Private Sub addNormalPigtailTransition(ByVal oConnector As EA.Connector, ByVal oState As EA.Element)
    '            Dim oClientState As EA.Element
    '            Dim sEvent As String
    '            Dim sTokens() As String
    '            Dim oSupplierState As EA.Element = Nothing

    '            Try
    '                If _oDomain.States.Contains(oConnector.SupplierID.ToString) Then                ' if "to" state is a normal state
    '                    oSupplierState = _oDomain.States(oConnector.SupplierID.ToString)
    '                    oClientState = _oDomain.States(oConnector.ClientID.ToString)
    '                    If oClientState Is oState Then
    '                        sEvent = oConnector.TransitionEvent
    '                        sTokens = Split(sEvent, ":")
    '                        If sTokens.Length > 1 Then              ' peel off any "ev1:" style prefix
    '                            sEvent = sTokens(1)
    '                        End If

    '                        If sEvent.Length > 0 Then
    '                            If sEvent.IndexOf(")") > 0 Then
    '                                sTokens = Split(sEvent.Substring(0, sEvent.IndexOf(")")), "(")            ' peel off any parameter payload
    '                                If sTokens.Length > 1 Then
    '                                    sEvent = sTokens(0)
    '                                End If
    '                            End If
    '                            With _oSourceOutput
    '                                .AppendText(("   if ( $eventId == ::EVENT_" & sEvent & " )").PadRight(50) & " { $functionPointer = \& action" & oSupplierState.Name & "; }" & vbCrLf)
    '                            End With
    '                        End If
    '                    End If
    '                End If
    '            Catch ex As Exception
    '                Dim oErrorHandler As New sjmErrorHandler(ex)
    '            End Try
    '        End Sub

    '        Private Sub addState(ByVal oState As EA.Element, ByVal sArgumentList As String, ByVal oClass As EA.Element)
    '            Dim sLines() As String
    '            Dim sLine As String
    '            Dim bQuiet As Boolean
    '            Dim bIsFinalState As Boolean

    '            Try
    '                bIsFinalState = _oDomain.FinalStates.Contains(oState.ElementID)
    '                With _oSourceOutput
    '                    If Not _oDomain.IgnoreIndicatorStates.Contains(oState.ElementID) Then
    '                        bQuiet = (-1 < oState.Stereotype.ToString.ToUpper.IndexOf("QUIET"))
    '                        sLines = Split(oState.Notes, vbCrLf)
    '                        .AppendText("#_________________________________________________________ " & oClass.Name & ": " & oState.Name & " (v" & oState.Version & ")" & vbCrLf)
    '                        .AppendText("sub action" & oState.Name & "()" & vbCrLf)
    '                        .AppendText("{" & vbCrLf)
    '                        .AppendText("   my ( $self, $event ) = @_;" & vbCrLf)
    '                        If Not bQuiet Then
    '                            .AppendText("   print(""                                            <State  name=\""" & oState.Name & " ("" . $serialNumber++ . "")\""   class=\""" & oClass.Name & "\""    instance=\""$self->{_name}\""  />\n"");" & vbCrLf)
    '                        End If
    '                        .AppendText(vbCrLf)
    '                        .AppendText("   #................................................... begin action code" & vbCrLf)
    '                        For Each sLine In sLines
    '                            .AppendText(StripRichTextFormat(sLine) & vbLf)
    '                        Next
    '                        .AppendText("   #................................................... end action code" & vbCrLf)
    '                        .AppendText(vbCrLf)

    '                        If bIsFinalState Then
    '                            .AppendText("   exit;         # this is a final state so exit the perl script" & vbCrLf)
    '                        Else
    '                            .AppendText("   $self->{_currentState} = ::STATE_" & oState.Name & ";" & vbCrLf)
    '                        End If
    '                        .AppendText("}" & vbCrLf & vbCrLf)
    '                    End If
    '                End With
    '            Catch ex As Exception
    '                Dim oErrorHandler As New sjmErrorHandler(ex)
    '            End Try
    '        End Sub

    '        Private Sub addRelationships(ByVal oClass As EA.Element)
    '            addRelationships_recurse(oClass)
    '        End Sub

    '        Private Sub addRelationships_recurse(ByVal oClass As EA.Element)
    '            Dim oConnector As EA.Connector
    '            Dim sOtherClassName As String
    '            Dim sSupplierCardinality As String
    '            Dim sClientCardinality As String
    '            Dim sTokens() As String
    '            Dim sToken As String

    '            Try
    '                sTokens = Split(oClass.GetRelationSet(EA.EnumRelationSetType.rsGeneralizeStart), ",")
    '                For Each sToken In sTokens
    '                    If sToken.Length > 0 Then
    '                        addRelationships_recurse(_oDomain.EAClass(sToken))
    '                    End If
    '                Next

    '                With _oSourceOutput
    '                    For Each oConnector In oClass.Connectors
    '                        If oConnector.Type = "Association" Then
    '                            If oClass.Name = _oDomain.EAClass(oConnector.SupplierID).Name Then
    '                                sOtherClassName = _oDomain.EAClass(oConnector.ClientID).Name
    '                                sSupplierCardinality = oConnector.ClientEnd.Cardinality
    '                                sClientCardinality = oConnector.SupplierEnd.Cardinality
    '                            Else
    '                                sOtherClassName = _oDomain.EAClass(oConnector.SupplierID).Name
    '                                sSupplierCardinality = oConnector.SupplierEnd.Cardinality
    '                                sClientCardinality = oConnector.ClientEnd.Cardinality
    '                            End If

    '                            .AppendText(vbCrLf)
    '                            .AppendText("   sub Relate_" & oConnector.Name & "_" & sOtherClassName & vbCrLf)
    '                            .AppendText("   {" & vbCrLf)
    '                            .AppendText("      my( $self, $relatedInstance ) = @_;" & vbCrLf)
    '                            .AppendText(vbCrLf)
    '                            .AppendText("      die ""Instance passed to 'Relate_" & oConnector.Name & "_" & sOtherClassName & "' is null"" unless defined $relatedInstance;" & vbCrLf)
    '                            .AppendText(vbCrLf)

    '                            If (sSupplierCardinality = "1" Or sSupplierCardinality = "0..1") Then
    '                                .AppendText("      $self->{" & oConnector.Name & "_" & sOtherClassName & "} = $relatedInstance;   # (1) add a pointer to the " & sOtherClassName & " instance" & vbCrLf)
    '                            Else
    '                                .AppendText("      $self->{" & oConnector.Name & "_" & sOtherClassName & "}{ $relatedInstance->{_uniqueId} } = $relatedInstance;   # (2) add the " & sOtherClassName & " instance to " & oClass.Name & "'s reference list" & vbCrLf)
    '                            End If

    '                            If (sClientCardinality = "1" Or sClientCardinality = "0..1") Then
    '                                .AppendText("      $relatedInstance->{" & oConnector.Name & "_" & oClass.Name & "} = $self;           # (3) add a pointer to the " & oClass.Name & " instance" & vbCrLf)
    '                            Else
    '                                .AppendText("      $relatedInstance->{" & oConnector.Name & "_" & oClass.Name & "}{ $self->{_uniqueId} } = $self;           # (4) add the " & oClass.Name & " instance to " & sOtherClassName & "'s reference list" & vbCrLf)
    '                            End If

    '                            .AppendText("   }" & vbCrLf)
    '                            .AppendText(vbCrLf)

    '                            .AppendText("   sub Unrelate_" & oConnector.Name & "_" & sOtherClassName & vbCrLf)
    '                            .AppendText("   {" & vbCrLf)
    '                            .AppendText("      my( $self, $relatedInstance ) = @_;" & vbCrLf)
    '                            .AppendText(vbCrLf)
    '                            .AppendText("      die ""'Unrelate_" & oConnector.Name & "_" & sOtherClassName & "' must be called as an instance method (like this: \$obj->Unrelate_" & oConnector.Name & "_" & sOtherClassName & """ unless $self->isa('" & oClass.Name & "');" & vbCrLf)
    '                            .AppendText("      die ""Instance passed to 'Unrelate_" & oConnector.Name & "_" & sOtherClassName & "' is null"" unless defined $relatedInstance;" & vbCrLf)
    '                            .AppendText("      die ""Instance passed to 'Unrelate_" & oConnector.Name & "_" & sOtherClassName & "' is not of type '" & sOtherClassName & "'"" unless $relatedInstance->isa('" & sOtherClassName & "');" & vbCrLf)
    '                            .AppendText(vbCrLf)
    '                            .AppendText("      delete $self->{" & oConnector.Name & "_" & sOtherClassName & "}{ $relatedInstance->{_uniqueId} };   # delete the " & sOtherClassName & " instance from " & oClass.Name & "'s reference list" & vbCrLf)
    '                            .AppendText("   }" & vbCrLf)
    '                            .AppendText(vbCrLf)
    '                        End If
    '                    Next
    '                End With
    '            Catch ex As Exception
    '                Dim oErrorHandler As New sjmErrorHandler(ex)
    '            End Try
    '        End Sub

    '        Private Sub cardinalityComment(ByVal oConnector As EA.Connector, ByRef sCardinalityComment As String, ByVal oClass As EA.Element)
    '            Dim sSupplierCardinality As String

    '            If oClass.Name = _oDomain.EAClass(oConnector.SupplierID).Name Then
    '                sSupplierCardinality = oConnector.ClientEnd.Cardinality
    '            Else
    '                sSupplierCardinality = oConnector.SupplierEnd.Cardinality
    '            End If

    '            Select Case sSupplierCardinality
    '                Case "1", "0..1"
    '                    sCardinalityComment = "                         # " & buildRelationshipPhrase(oConnector, oClass)

    '                Case ""
    '                    sCardinalityComment = "                         # CARDINALITY ASSUMED: " & buildRelationshipPhrase(oConnector, oClass)

    '                Case "0..*", "1..*"
    '                    sCardinalityComment = "                         # " & buildRelationshipPhrase(oConnector, oClass)

    '                Case Else
    '                    sCardinalityComment = "                         # <unknown cardinality> " & sSupplierCardinality
    '            End Select
    '        End Sub

    '        Private Sub addAttributes_recurse(ByVal oClass As EA.Element)
    '            Dim sTokens() As String
    '            Dim oConnector As EA.Connector
    '            Dim sOtherClassName As String = ""
    '            Dim sToken As String
    '            Dim sCardinalityComment As String = ""
    '            Dim oAttribute As EA.Attribute
    '            Dim sCanonicalAttributeString As String
    '            Dim sSupplierCardinality As String
    '            Dim sClientCardinality As String

    '            With _oSourceOutput
    '                For Each oAttribute In oClass.Attributes
    '                    sCanonicalAttributeString = oAttribute.Name.PadRight(25) & " => """",                           # " & oAttribute.Notes & " (" & oAttribute.Type & ")"
    '                    .AppendText("      " & sCanonicalAttributeString & vbCrLf)
    '                Next

    '                For Each oConnector In oClass.Connectors
    '                    If oConnector.Type = "Association" Then

    '                        If oClass.Name = _oDomain.EAClass(oConnector.SupplierID).Name Then
    '                            sOtherClassName = _oDomain.EAClass(oConnector.ClientID).Name
    '                            sSupplierCardinality = oConnector.ClientEnd.Cardinality
    '                            sClientCardinality = oConnector.SupplierEnd.Cardinality
    '                        Else
    '                            sOtherClassName = _oDomain.EAClass(oConnector.SupplierID).Name
    '                            sSupplierCardinality = oConnector.SupplierEnd.Cardinality
    '                            sClientCardinality = oConnector.ClientEnd.Cardinality
    '                        End If

    '                        cardinalityComment(oConnector, sCardinalityComment, oClass)
    '                        If (sSupplierCardinality = "1" Or sSupplierCardinality = "0..1") Then
    '                            .AppendText("      " & (oConnector.Name & "_" & sOtherClassName).PadRight(25) & " => """",  " & sCardinalityComment & vbCrLf)
    '                        Else
    '                            .AppendText("      " & (oConnector.Name & "_" & sOtherClassName).PadRight(25) & " => {  }," & sCardinalityComment & vbCrLf)
    '                        End If
    '                    End If
    '                Next

    '                sTokens = Split(oClass.GetRelationSet(EA.EnumRelationSetType.rsGeneralizeStart), ",")
    '                For Each sToken In sTokens
    '                    If sToken.Length > 0 Then
    '                        addAttributes_recurse(_oDomain.EAClass(sToken))
    '                    End If
    '                Next
    '            End With

    '        End Sub

    '        Private Sub addAttributes(ByVal oClass As EA.Element)
    '            Dim sCommentText As String
    '            Dim sNewAttributes As String = ""
    '            Dim sNotesString As String = ""
    '            Dim oAttribute As EA.Attribute

    '            Try
    '                With _oSourceOutput
    '                    For Each oAttribute In oClass.Attributes
    '                        If oAttribute.Notes.Length > 0 Then
    '                            sCommentText = "      # " & oAttribute.Notes
    '                        Else
    '                            sCommentText = ""
    '                        End If
    '                    Next

    '                    .AppendText(vbCrLf)
    '                    .AppendText("#_____________________________________________________________________" & vbCrLf)
    '                    .AppendText("sub new()" & vbCrLf)
    '                    .AppendText("{" & vbCrLf)
    '                    .AppendText("my($class, $name, $DUMMY ) = @_; " & vbCrLf)
    '                    .AppendText("" & vbCrLf)
    '                    .AppendText("   if($DUMMY)" & vbCrLf)
    '                    .AppendText("   {" & vbCrLf)
    '                    .AppendText("      die(""\n<<< '" & oClass.Name & "->new()' should be called with exactly 1 parameter: the name of the instance being created >>>\n "")" & vbCrLf)
    '                    .AppendText("   }" & vbCrLf)
    '                    .AppendText("" & vbCrLf)
    '                    .AppendText(vbCrLf)
    '                    .AppendText("   $name = ""<anonymous>"" unless $name;")
    '                    .AppendText(vbCrLf)
    '                    .AppendText("   my $self =" & vbCrLf)
    '                    .AppendText("   { " & vbCrLf)

    '                    addAttributes_recurse(oClass)

    '                    sNotesString = oClass.Notes
    '                    sNotesString = sNotesString.Replace(vbCr, "\n")
    '                    sNotesString = sNotesString.Replace(vbLf, "\r")

    '                    .AppendText("      _name                     => $name," & vbCrLf)
    '                    .AppendText("      _className                => """ & oClass.Name & """," & vbCrLf)
    '                    .AppendText("      _description              => """ & sNotesString & """," & vbCrLf)
    '                    .AppendText("      _uniqueId                 => $arch->nextUniqueId()," & vbCrLf)
    '                    If _bActiveClass Then
    '                        .AppendText("      _currentState             => ::STATE_" & _sInitialState & vbCrLf)
    '                    End If

    '                    .AppendText("   }; " & vbCrLf)
    '                    .AppendText(vbCrLf)

    '                    For Each oAttribute In oClass.Attributes
    '                        If oAttribute.Default.Length > 0 Then
    '                            .AppendText("   $self->{" & oAttribute.Name & "} = " & canonicalValue(oAttribute.Default) & ";" & vbCrLf)
    '                        End If
    '                    Next
    '                    .AppendText(vbCrLf)
    '                    .AppendText("   bless($self, $class);" & vbCrLf)
    '                    .AppendText("   return $self;  " & vbCrLf)
    '                    .AppendText("}" & vbCrLf)

    '                    .AppendText(vbCrLf)
    '                    .AppendText("#_____________________________________________________________________" & vbCrLf)
    '                    .AppendText("sub Describe()" & vbCrLf)
    '                    .AppendText("{" & vbCrLf)
    '                    .AppendText("   my $self = shift;" & vbCrLf)
    '                    .AppendText(vbCrLf)
    '                    .AppendText("   print "" _________________ " & oClass.Name & " _________________\n"";" & vbCrLf)
    '                    .AppendText("   ::dump( $self, 1 );  # we'll let Data::Dumper do all the work" & vbCrLf)
    '                    .AppendText("}" & vbCrLf)
    '                    .AppendText(vbCrLf)
    '                End With

    '            Catch ex As Exception
    '                Dim oErrorHandler As New sjmErrorHandler(ex)
    '            End Try
    '        End Sub

    '        Private Function canonicalValue(ByVal sUserGivenValue As String) As String
    '            Dim sCanonicalValue As String

    '            Select Case sUserGivenValue.ToLower
    '                Case "false"
    '                    sCanonicalValue = "0"

    '                Case "true"
    '                    sCanonicalValue = "1"

    '                Case Else
    '                    sCanonicalValue = sUserGivenValue
    '            End Select

    '            Return sCanonicalValue
    '        End Function

    '        Private Sub printAttributeDescription(ByVal sAttributeName As String)
    '            _oSourceOutput.AppendText(("   print(""\n  " & sAttributeName & ": ").PadRight(COLUMN_WIDTH) & (" ""); print($self->{" & sAttributeName & "})").PadRight(COLUMN_WIDTH) & " if $self->{" & sAttributeName & "};" & vbCrLf)
    '        End Sub

    '        Private Function buildRelationshipPhrase(ByVal oConnector As EA.Connector, ByVal oClass As EA.Element) As String
    '            Dim iClientClassId As Integer
    '            Dim iSupplierClassId As Integer
    '            Dim sPhrase As String = ""
    '            Dim oClientClass As EA.Element
    '            Dim oSupplierClass As EA.Element
    '            Dim sClientRole As String
    '            Dim sSupplierRole As String
    '            Dim sSupplierCardinality As String
    '            Dim sSupplierClassName As String
    '            Dim sClientClassName As String

    '            Try
    '                With oConnector
    '                    iClientClassId = .ClientID
    '                    iSupplierClassId = .SupplierID
    '                    sClientRole = .ClientEnd.Role
    '                    sSupplierRole = .SupplierEnd.Role
    '                    sSupplierCardinality = .SupplierEnd.Cardinality

    '                    With _oDomain
    '                        oClientClass = .EAClass(iClientClassId)
    '                        sClientClassName = oClientClass.Name
    '                        oSupplierClass = .EAClass(iSupplierClassId)
    '                        sSupplierClassName = oSupplierClass.Name
    '                    End With

    '                    If sClientClassName = oClass.Name Then
    '                        ' do nothing, perspective is already proper
    '                    Else
    '                        If sSupplierClassName = oClass.Name Then
    '                            iClientClassId = .SupplierID
    '                            iSupplierClassId = .ClientID
    '                            sClientRole = .SupplierEnd.Role
    '                            sSupplierRole = .ClientEnd.Role
    '                            sSupplierCardinality = .ClientEnd.Cardinality

    '                            With _oDomain
    '                                oClientClass = .EAClass(iClientClassId)
    '                                sClientClassName = oClientClass.Name
    '                                oSupplierClass = .EAClass(iSupplierClassId)
    '                                sSupplierClassName = oSupplierClass.Name
    '                            End With
    '                        Else
    '                            Throw New ApplicationException("PerspectiveClassName '" & oClass.Name & "'does not match either participant in relationship")
    '                        End If
    '                    End If
    '                End With

    '                Select Case oConnector.Type
    '                    Case "Generalization"
    '                        sPhrase = oClientClass.Name & " is a " & oSupplierClass.Name
    '                    Case "Association"
    '                        sPhrase = ""
    '                        Select Case sSupplierCardinality
    '                            Case "1"
    '                                sPhrase += oClientClass.Name & " '" & sClientRole & "' exactly one " & oSupplierClass.Name

    '                            Case "0..1"
    '                                sPhrase += oClientClass.Name & " '" & sClientRole & "' zero or one " & oSupplierClass.Name

    '                            Case "0..*"
    '                                sPhrase += oClientClass.Name & " '" & sClientRole & "' zero or more " & oSupplierClass.Name & "s"

    '                            Case "1..*"
    '                                sPhrase += oClientClass.Name & " '" & sClientRole & "' one or more " & oSupplierClass.Name & "s"

    '                            Case Else
    '                                sPhrase += "<unknown cardinality on '" & oClientClass.Name & "' side of relationship '" & oConnector.Name & "'"
    '                        End Select
    '                    Case Else
    '                        sPhrase = "<unknown connector type: " & oConnector.Type
    '                End Select
    '            Catch ex As Exception
    '                Dim oErrorHandler As New sjmErrorHandler(ex)
    '            End Try

    '            Return sPhrase
    '        End Function


    '    End Class

End Class